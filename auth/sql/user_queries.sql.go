// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_queries.sqlite

package auth

import (
	"context"
	"database/sql"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO user (
    name, email, password, uuid
) VALUES (
  ?,?,?,?
         )
RETURNING pk, email, name, password, uuid
`

type CreateUsersParams struct {
	Name     sql.NullString
	Email    sql.NullString
	Password sql.NullString
	Uuid     sql.NullString
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUsers,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Uuid,
	)
	var i User
	err := row.Scan(
		&i.Pk,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Uuid,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user
WHERE pk = ?
`

func (q *Queries) DeleteUser(ctx context.Context, pk int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, pk)
	return err
}

const getUser = `-- name: GetUser :one
SELECT pk, email, name, password, uuid FROM  user
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Pk,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Uuid,
	)
	return i, err
}

const getUserCount = `-- name: GetUserCount :one
    SELECT count(*) FROM user
`

func (q *Queries) GetUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUsers = `-- name: ListUsers :many
SELECT pk, email, name, password, uuid FROM user
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Pk,
			&i.Email,
			&i.Name,
			&i.Password,
			&i.Uuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user
set name = ?,
    email = ?,
    password = ?
WHERE pk = ?
`

type UpdateUserParams struct {
	Name     sql.NullString
	Email    sql.NullString
	Password sql.NullString
	Pk       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Pk,
	)
	return err
}
