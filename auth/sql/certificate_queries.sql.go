// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: certificate_queries.sqlite

package auth

import (
	"context"
	"database/sql"
)

const createCertificate = `-- name: CreateCertificate :one
INSERT INTO certificate(
                        user_email, subject_common_name, subject_organization, subject_organization_unit, subject_country, subject_locality, subject_province,
                        issuer_id, serial_number, not_before, not_after
) VALUES ( ?,?,?,?,?,?,?,?,?,?,?)
RETURNING pk, user_email, subject_common_name, subject_organization, subject_organization_unit, subject_country, subject_locality, subject_province, issuer_id, serial_number, not_before, not_after
`

type CreateCertificateParams struct {
	UserEmail               interface{}
	SubjectCommonName       sql.NullString
	SubjectOrganization     interface{}
	SubjectOrganizationUnit interface{}
	SubjectCountry          interface{}
	SubjectLocality         interface{}
	SubjectProvince         interface{}
	IssuerID                sql.NullInt64
	SerialNumber            sql.NullString
	NotBefore               sql.NullString
	NotAfter                sql.NullString
}

func (q *Queries) CreateCertificate(ctx context.Context, arg CreateCertificateParams) (Certificate, error) {
	row := q.db.QueryRowContext(ctx, createCertificate,
		arg.UserEmail,
		arg.SubjectCommonName,
		arg.SubjectOrganization,
		arg.SubjectOrganizationUnit,
		arg.SubjectCountry,
		arg.SubjectLocality,
		arg.SubjectProvince,
		arg.IssuerID,
		arg.SerialNumber,
		arg.NotBefore,
		arg.NotAfter,
	)
	var i Certificate
	err := row.Scan(
		&i.Pk,
		&i.UserEmail,
		&i.SubjectCommonName,
		&i.SubjectOrganization,
		&i.SubjectOrganizationUnit,
		&i.SubjectCountry,
		&i.SubjectLocality,
		&i.SubjectProvince,
		&i.IssuerID,
		&i.SerialNumber,
		&i.NotBefore,
		&i.NotAfter,
	)
	return i, err
}

const deleteCertificate = `-- name: DeleteCertificate :exec
DELETE FROM certificate
WHERE pk = ?
`

func (q *Queries) DeleteCertificate(ctx context.Context, pk int64) error {
	_, err := q.db.ExecContext(ctx, deleteCertificate, pk)
	return err
}

const getCertificateFromPK = `-- name: GetCertificateFromPK :one
SELECT pk, user_email, subject_common_name, subject_organization, subject_organization_unit, subject_country, subject_locality, subject_province, issuer_id, serial_number, not_before, not_after FROM certificate
WHERE pk = ? LIMIT 1
`

func (q *Queries) GetCertificateFromPK(ctx context.Context, pk int64) (Certificate, error) {
	row := q.db.QueryRowContext(ctx, getCertificateFromPK, pk)
	var i Certificate
	err := row.Scan(
		&i.Pk,
		&i.UserEmail,
		&i.SubjectCommonName,
		&i.SubjectOrganization,
		&i.SubjectOrganizationUnit,
		&i.SubjectCountry,
		&i.SubjectLocality,
		&i.SubjectProvince,
		&i.IssuerID,
		&i.SerialNumber,
		&i.NotBefore,
		&i.NotAfter,
	)
	return i, err
}

const getCertificateFromSubjectCommonName = `-- name: GetCertificateFromSubjectCommonName :one
SELECT pk, user_email, subject_common_name, subject_organization, subject_organization_unit, subject_country, subject_locality, subject_province, issuer_id, serial_number, not_before, not_after FROM certificate
WHERE subject_common_name = ? LIMIT 1
`

func (q *Queries) GetCertificateFromSubjectCommonName(ctx context.Context, subjectCommonName sql.NullString) (Certificate, error) {
	row := q.db.QueryRowContext(ctx, getCertificateFromSubjectCommonName, subjectCommonName)
	var i Certificate
	err := row.Scan(
		&i.Pk,
		&i.UserEmail,
		&i.SubjectCommonName,
		&i.SubjectOrganization,
		&i.SubjectOrganizationUnit,
		&i.SubjectCountry,
		&i.SubjectLocality,
		&i.SubjectProvince,
		&i.IssuerID,
		&i.SerialNumber,
		&i.NotBefore,
		&i.NotAfter,
	)
	return i, err
}

const listCertificates = `-- name: ListCertificates :many
SELECT pk, user_email, subject_common_name, subject_organization, subject_organization_unit, subject_country, subject_locality, subject_province, issuer_id, serial_number, not_before, not_after FROM certificate
ORDER BY subject_common_name
`

func (q *Queries) ListCertificates(ctx context.Context) ([]Certificate, error) {
	rows, err := q.db.QueryContext(ctx, listCertificates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.Pk,
			&i.UserEmail,
			&i.SubjectCommonName,
			&i.SubjectOrganization,
			&i.SubjectOrganizationUnit,
			&i.SubjectCountry,
			&i.SubjectLocality,
			&i.SubjectProvince,
			&i.IssuerID,
			&i.SerialNumber,
			&i.NotBefore,
			&i.NotAfter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCertificatesByExpiration = `-- name: ListCertificatesByExpiration :many
SELECT pk, user_email, subject_common_name, subject_organization, subject_organization_unit, subject_country, subject_locality, subject_province, issuer_id, serial_number, not_before, not_after FROM certificate
ORDER BY not_after
`

func (q *Queries) ListCertificatesByExpiration(ctx context.Context) ([]Certificate, error) {
	rows, err := q.db.QueryContext(ctx, listCertificatesByExpiration)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.Pk,
			&i.UserEmail,
			&i.SubjectCommonName,
			&i.SubjectOrganization,
			&i.SubjectOrganizationUnit,
			&i.SubjectCountry,
			&i.SubjectLocality,
			&i.SubjectProvince,
			&i.IssuerID,
			&i.SerialNumber,
			&i.NotBefore,
			&i.NotAfter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCertificate = `-- name: UpdateCertificate :exec
UPDATE certificate
set user_email=?, subject_common_name=?, subject_organization=?, subject_organization_unit=?, subject_country=?, subject_locality=?, subject_province=?,
    issuer_id=?, serial_number=?, not_before=?, not_after=?
WHERE pk = ?
`

type UpdateCertificateParams struct {
	UserEmail               interface{}
	SubjectCommonName       sql.NullString
	SubjectOrganization     interface{}
	SubjectOrganizationUnit interface{}
	SubjectCountry          interface{}
	SubjectLocality         interface{}
	SubjectProvince         interface{}
	IssuerID                sql.NullInt64
	SerialNumber            sql.NullString
	NotBefore               sql.NullString
	NotAfter                sql.NullString
	Pk                      int64
}

func (q *Queries) UpdateCertificate(ctx context.Context, arg UpdateCertificateParams) error {
	_, err := q.db.ExecContext(ctx, updateCertificate,
		arg.UserEmail,
		arg.SubjectCommonName,
		arg.SubjectOrganization,
		arg.SubjectOrganizationUnit,
		arg.SubjectCountry,
		arg.SubjectLocality,
		arg.SubjectProvince,
		arg.IssuerID,
		arg.SerialNumber,
		arg.NotBefore,
		arg.NotAfter,
		arg.Pk,
	)
	return err
}
